{"version":3,"file":"static/js/737.6329a175.chunk.js","mappings":"4KACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAAgL,yBAAhL,EAAgN,sBAAhN,EAA+O,wBAA/O,EAAgR,wB,mBCanQA,EAAa,SAACC,GACvB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAO,UACvB,iBAAKD,UAAWC,EAAW,IAAMA,EAAS,WACtC,gBAAKD,UAAWC,EAAUC,IAAKL,EAAMM,UACrC,UAAC,KAAO,CAACC,GAAIN,EAAMO,MAAO,SAACC,GACvB,MAAO,CAACC,MAAOD,EAAOE,SAAW,MAAQ,UAAWC,eAAe,OAEvE,EAAE,cAAGZ,EAAMa,KAAI,WAK3B,ECpBaC,EAAU,SAACd,GACpB,OAAO,gBAAKG,UAAWC,EAAS,SAAEJ,EAAMe,SAC5C,E,iDCTA,EAAuB,6B,SCwCVC,GAAsBC,EAAAA,EAAAA,GAA8B,CAC7DC,KAAM,oBADyBD,EA9B+B,SAACjB,IAE3CmB,EAAAA,EAAAA,IAAiB,KAClBC,EAAAA,EAAAA,IAAiB,GADpC,IAEA,GAAwCC,EAAAA,EAAAA,UAAS,IAAG,eAAjC,KAAiB,KAMpC,OACI,kBAAMC,SAAUtB,EAAMuB,aAAa,WAC/B,gBAAKpB,UAAWC,EAAO,UACnB,SAACoB,EAAA,EAAK,CACFrB,UAAWC,EACXqB,UAAWC,EAAAA,EACXb,KAAM,iBACNc,YAAa,4BAKrB,4BACI,mBAAQxB,UAAWyB,EAAAA,EAAAA,OAAYC,QAjBxB,SAACC,GAChB,MAAO,EACX,EAe+D,kBACnD,mBAAQ3B,UAAWyB,EAAAA,EAAAA,OAAYC,QAAS7B,EAAM+B,MAAM,wBAIpE,I,wCCpCaC,EAAiB,SAACC,GAC3B,OAAOA,EAAMC,cACjB,ECmDA,GAAeC,EAAAA,EAAAA,KACdC,EAAAA,EAAAA,KArCuB,SAACH,GAErB,MAAO,CACHI,aAAcL,EAAeC,GAE7BK,OAAQL,EAAMM,YAAYD,OAElC,IAU2B,SAACE,GACxB,MAAO,CACHC,WAAY,SAACC,GACTF,GAASG,EAAAA,EAAAA,IAAkBD,GAC/B,EAKR,IAW8CE,EAAAA,EAD9C,EChDmD,SAAH,GAAoC,IAA/BP,EAAY,EAAZA,aAAcI,EAAU,EAAVA,WAEzDI,EAAcR,EAAaS,MAAMC,KAAI,SAACC,GAAM,OAAK,SAACjD,EAAU,CAAYG,GAAI8C,EAAE9C,GAAIW,KAAMmC,EAAEnC,KAAMP,OAAQ0C,EAAE1C,QAAxC0C,EAAE9C,GAA+C,IACnHa,EAAUsB,EAAaY,SAASF,KAAI,SAACG,GAAM,OAAK,SAACpC,EAAO,CAAYZ,GAAIgD,EAAEhD,GAAIa,QAASmC,EAAEnC,SAA3BmC,EAAEhD,GAAoC,IAU1G,OACI,iBAAKC,UAAWC,EAAU,WACtB,gBAAKD,UAAWC,EAAe,SAC1ByC,KAEL,gBAAK1C,UAAWC,EAAU,SACrBW,KAEL,SAACC,EAAmB,CAACM,SAdP,SAAC6B,GACnBV,EAAWU,EAAOT,eACtB,MAeJ,G","sources":["webpack://samurai-type/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem.tsx","components/Dialogs/Message/Message.tsx","webpack://samurai-type/./src/components/Dialogs/AddMessageForm/AddMessageForm.module.css?2bba","components/Dialogs/AddMessageForm/AddMessageForm.tsx","redux/dialogs-selectors.ts","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__I1zPU\",\"dialogsItems\":\"Dialogs_dialogsItems__DgUal\",\"active\":\"Dialogs_active__I0stq\",\"messages\":\"Dialogs_messages__+SCQp\",\"message\":\"Dialogs_message__OJpEE\",\"user\":\"Dialogs_user__A9tef\",\"dialog\":\"Dialogs_dialog__9pCZz\",\"avatar\":\"Dialogs_avatar__N7wKX\"};","import React, {useRef} from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {Message} from \"./Message/Message\";\r\nimport {Dialogs} from \"./Dialogs\";\r\n\r\nexport type DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n    // DialogItem: (id: string, name: string, message: string)=> void\r\n}\r\n\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.user}>\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <img className={s.avatar} src={props.avatar}/>\r\n            <NavLink to={path} style={(params)=> {\r\n                return {color: params.isActive ? \"red\" : \"darkred\", textDecoration:'none'\r\n                }\r\n            }}> {props.name} </NavLink>\r\n        </div>\r\n        </div>\r\n    )\r\n\r\n}","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AddMessageForm_form__jonL8\"};","import React, {FC, useState} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, minLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport s from './AddMessageForm.module.css';\r\nimport btn from '../../common/styles/Button.module.css'\r\n\r\nexport type AddMessageFormType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst AddMessageForm: FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n\r\n    const maxLength50 = maxLengthCreator(50)\r\n    const minLength5 = minLengthCreator(5)\r\n    const [resetMessage, setResetMessage] = useState('')\r\n\r\n    const addMessage = (e: any) => {\r\n        return ''\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.form}>\r\n                <Field\r\n                    className={s.form}\r\n                    component={TextArea}\r\n                    name={'newMessageText'}\r\n                    placeholder={\"Enter you message...\"}\r\n                >\r\n                    {/*validate={[required,maxLength50, minLength5]}был в форме, но из-за него постоянный rerender*/}\r\n                </Field>\r\n            </div>\r\n            <div>\r\n                <button className={btn.button} onClick={addMessage}>Add</button>\r\n                <button className={btn.button} onClick={props.reset}>Reset</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm<AddMessageFormType>({\r\n    form: 'dialogAddMessage'\r\n})(AddMessageForm)","import {AppStateType} from \"./redux-store\";\r\n\r\n\r\nexport const getDialogsPage = (state: AppStateType) => {\r\n    return state.dialogsReducer\r\n}","import React, {ComponentType} from \"react\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {addMessageCreator, InitialStateType} from \"./dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {getDialogsPage} from \"../../redux/dialogs-selectors\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogsState: InitialStateType\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (newMessageText: string) => void\r\n    // onMessage: (message: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n\r\n    return {\r\n        dialogsState: getDialogsPage(state),\r\n        // state.dialogsPage раньше было так\r\n        isAuth: state.authReducer.isAuth\r\n    }\r\n}\r\n\r\n// let mapStateToProps = useMemo((state: AppStateType) => {\r\n//     return {\r\n//         dialogsState: state.dialogsReducer, // state.dialogsPage\r\n//         isAuth: state.authReducer.isAuth\r\n//     }\r\n// }, [])\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addMessage: (newMessageText) => {\r\n            dispatch(addMessageCreator(newMessageText))\r\n        }\r\n        // onMessage: (message:string)=> {\r\n        //     dispatch(onMessagePostCreator(message))\r\n        // }\r\n    }\r\n}\r\n//уточнить пропсы\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n//\r\n// const DialogsContainer = connect (mapStateToProps,mapDispatchToProps) (AuthRedirectComponent);\r\n\r\nexport default compose<ComponentType>\r\n(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect\r\n)(Dialogs);","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport {DialogItem} from \"./DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {AddMessageReduxForm} from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = ({dialogsState, addMessage}) => {\r\n\r\n    const dialogsItem = dialogsState.users.map((d: any) => <DialogItem key={d.id} id={d.id} name={d.name} avatar={d.avatar}/>)\r\n    const message = dialogsState.messages.map((m: any) => <Message key={m.id} id={m.id} message={m.message} />)\r\n\r\n    // const newMessageElement = useRef<HTMLTextAreaElement>(null); //????\r\n\r\n    const addNemMessage = (values: any) => {\r\n        addMessage(values.newMessageText)\r\n    }\r\n\r\n// if (!authReducer.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsItem}\r\n            </div>\r\n            <div className={s.message}>\r\n                {message}\r\n            </div>\r\n            <AddMessageReduxForm onSubmit={addNemMessage}/>\r\n        </div>\r\n    )\r\n}"],"names":["DialogItem","props","path","id","className","s","src","avatar","to","style","params","color","isActive","textDecoration","name","Message","message","AddMessageReduxForm","reduxForm","form","maxLengthCreator","minLengthCreator","useState","onSubmit","handleSubmit","Field","component","TextArea","placeholder","btn","onClick","e","reset","getDialogsPage","state","dialogsReducer","compose","connect","dialogsState","isAuth","authReducer","dispatch","addMessage","newMessageText","addMessageCreator","withAuthRedirect","dialogsItem","users","map","d","messages","m","values"],"sourceRoot":""}